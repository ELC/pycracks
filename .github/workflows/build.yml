name: build and publish

on:
  push:
    branches:
      - "master"

  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
          persist-credentials: false

      - name: Set Up Git Identity
        run: |
          git config --global user.email "$(git log -1 --pretty=format:'%ae' | xargs)"
          git config --global user.name "${{ github.actor }}"
          git remote set-url origin "https://${{ github.actor }}:${{ secrets.PUSH_TOKEN }}@github.com/${{ github.repository }}"

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      
      - name: Install dependencies
        run: |
          pip install pipx==1.2.1

      - name: Update Version and Changelog
        run: |
          pipx install python-semantic-release==8.3.0
          semantic-release -v version --no-vcs-release --no-commit
          differences=$(git diff | xargs)

          if [ -z "$differences" ]; then
            echo "No changes needed"
            exit 0
          fi

          echo "Version and/or Changelog needs to be updated"

          git add --all
          git commit -m "chore(release): bump version and update changelog"
          git push

          echo "::error::The version and/or Changelog is outdated"
          echo "$differences"
          exit 1

      - name: Build package
        run: |
          pipx run build
      
      - name: Determine Target Version
        id: version
        run: |
          package_version=$(semantic-release -v version --print)
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@v1.8.10
        with:
          user: "__token__"
          password: "${{ secrets.PYPI_API_TOKEN }}"
        
      - name: Create Git Tag
        run: |
          git tag "v${{ env.PACKAGE_VERSION }}"
          git push origin --tags

      - uses: actions/setup-node@v3
      
      - name: Extract Changelog for current version
        run: |
          npm install changelog-parser
          changelog_body=$(changelog-parser CHANGELOG.md | jq -r ".versions[0].body")
          echo "CHANGELOG_BODY=$changelog_body" >> $GITHUB_ENV

      - name: Create Github release
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ env.PACKAGE_VERSION }}"
          body: "v${{ env.CHANGELOG_BODY }}"
          artifacts: "dist/*"
