name: build and publish

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

  workflow_dispatch:

permissions:
  actions: read
  contents: write
  pull-requests: write
  checks: write

concurrency:
  group: "${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}"
  cancel-in-progress: true

jobs:
  check_changelog:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set Up Git Identity
        run: |
          git fetch -v -v -v --all --unshallow
          git switch "${{ github.REF_NAME }}" || git switch "${{ github.HEAD_REF }}"
          git config --global user.email "$(git log -1 --pretty=format:'%ae' | xargs)"
          git config --global user.name "${{ github.actor }}"
          git remote set-url origin "https://${{ github.actor }}:${{ secrets.PUSH_TOKEN }}@github.com/${{ github.repository }}"

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          pip install pipx==1.2.1 pipenv==2023.2.4

      - name: Update Version and Changelog
        run: |
          pipx install python-semantic-release==8.3.0
          semantic-release -v version --no-vcs-release --no-commit
          differences=$(git diff | xargs)

          if [ -z "$differences" ]; then
            echo "No changes needed"
            exit 0
          fi

          echo "Version and/or Changelog needs to be updated"

          git add --all
          git commit -m "chore(release): bump version and update changelog"
          git push

          echo "::error::The version and/or Changelog is outdated"
          echo "$differences"
          sleep 30
          exit 1

      - name: Check Breaking changes
        run: |
          package_version=$(semantic-release -v version --print)
          pipenv install --dev --deploy
          pipx install .
          pycracks -vv -t $package_version

  test:
    runs-on: ubuntu-latest
    needs: check_changelog

    strategy:
      matrix:
        version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "${{ matrix.version }}"

      - name: Install dependencies
        run: |
          pip install pipenv==2023.2.4
          pipenv install --dev --deploy


      - name: Run Tests
        run: |
          pipenv run test > pytest-coverage.txt

      - name: Test Report
        uses: MishaKav/pytest-coverage-comment@v1.1.48
        if: always()
        with:
          pytest-coverage-path: pytest-coverage.txt
          pytest-xml-coverage-path: coverage-report.xml
          junitxml-path: coverage.xml
          create-new-comment: true

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        if: always()
        with:
          flag-name: ${{ matrix.version }}
          parallel: true

  test-finish:
    needs: test
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@v2
      with:
        parallel-finished: true

  deploy:
    runs-on: ubuntu-latest
    needs: test

    if: github.REF_NAME == 'master'

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set Up Git Identity
        run: |
          git fetch -v -v -v --all --unshallow
          git config --global user.email "$(git log -1 --pretty=format:'%ae' | xargs)"
          git config --global user.name "${{ github.actor }}"
          git remote set-url origin "https://${{ github.actor }}:${{ secrets.PUSH_TOKEN }}@github.com/${{ github.repository }}"

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          pip install pipx==1.2.1

      - name: Build package
        run: |
          pipx run build

      - name: Determine Target Version
        id: version
        run: |
          pipx install python-semantic-release==8.3.0
          package_version=$(semantic-release -v version --print)
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@v1.8.10
        with:
          user: "__token__"
          password: "${{ secrets.PYPI_API_TOKEN }}"

      - name: Create Git Tag
        run: |
          git tag "v${{ env.PACKAGE_VERSION }}"
          git push origin --tags

      - uses: actions/setup-node@v3

      - name: Extract Changelog for current version
        run: |
          npm install -g changelog-parser
          changelog-parser CHANGELOG.md | jq -r ".versions[0].body" >> changelog_body.md

      - name: Create Github release
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ env.PACKAGE_VERSION }}"
          bodyFile: "changelog_body.md"
          artifacts: "dist/*"
